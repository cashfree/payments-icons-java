apply plugin: 'maven-publish'
apply plugin: 'signing'

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

tasks.register('packageJavadoc', Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives packageJavadoc
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        publications {
            SDK(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact sourcesJar
                artifact packageJavadoc

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Cashfree Payments, Payment Icon library'
                    url = 'https://github.com/cashfree/payments-icons-java'
                    licenses {
                        license {
                            name = 'MIT License'
                        }
                    }
                    developers {
                        developer {
                            id = 'developers.cashfree'
                            name = 'Cashfree Payments'
                            email = 'developers@cashfree.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com:cashfree/payments-icons-java.git'
                        developerConnection = 'scm:git:ssh://github.com:cashfree/payments-icons-java.git'
                        url = 'https://github.com/cashfree/payments-icons-java'
                    }

                    withXml {
                        Node pomNode = asNode()
                        pomNode.dependencies.'*'.each() {
                            it.parent().remove(it)
                        }
                        pomNode.remove(pomNode.dependencies)
                        def dependenciesNode = asNode().appendNode('dependencies')
                        // Iterate over the api dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "compile")
                        }
                        configurations.api.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "compile")
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            System.getenv("SIGNING_KEY_ID"),
            System.getenv("SIGNING_KEY"),
            System.getenv("SIGNING_PASSWORD")
    )
    sign publishing.publications
}
